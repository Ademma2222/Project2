#include "AntHill.h"
#include <iostream>

static const int MAX_ROJDENIY_V_DEN = 3;

AntHill::AntHill ()
{
    razmer = 1000;
    max_muravei = 100;
    eda = 100;
    vetki = 0;
    den = 1;
}

AntHill::~AntHill ()
{
    for ( Ant * a : muravi )
          {
        delete a;
          }
}

void AntHill::ZhiznCikla()
{
    
    
    std::vector< Ant * > zhivye;
    
    for ( Ant * ant : muravi )
          {
        if ( !ant ) continue;
        
        ant->Rosti();
        ant->Zhivi();
        
        if ( rand() % 100 < 50 )
              {
            int uro = 5 + rand() % 5;
            ant->PoluchitUron( uro );
              }
        
        if ( ant->EstLiZhizn() )
              {
            zhivye.push_back( ant );
              }
        else
              {
            delete ant;
              }
          }
    
    muravi = zhivye;
    
    UpdatitRazmer();
    
    if ( eda <= 0 )
          {
        std::cout << "‚ö†Ô∏è  –ï–¥—ã –Ω–µ—Ç! –í—Å–µ –º—É—Ä–∞–≤—å–∏ –≥–æ–ª–æ–¥–∞—é—Ç!\n";
        for ( Ant * ant : muravi )
              {
            ant->PoluchitUron( 10 );
              }
          }
    else
          {
        int rashod = static_cast<int>( muravi.size() ) * 2;
        eda -= rashod;
        if ( eda < 0 ) eda = 0;
        
        std::cout << "üçΩÔ∏è  –ú—É—Ä–∞–≤—å–∏ –ø–æ–µ–ª–∏. –û—Å—Ç–∞–ª–æ—Å—å –µ–¥—ã: " << eda << "\n";
        
        for ( Ant * ant : muravi )
              {
            ant->Vosstanovit( 10 );
              }
          }
    
        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–æ–∂–¥–µ–Ω–∏–µ –º—É—Ä–∞–≤—å—ë–≤
    int skolko_rodit = 0;
    while ( skolko_rodit < MAX_ROJDENIY_V_DEN && eda >= 5 && muravi.size() < max_muravei )
          {
        Ant * noviy = PoyavlenieNovogoMuravya();
        if ( noviy )
              {
            muravi.push_back( noviy );
            skolko_rodit++;
              }
          }
    
    std::cout << "\n–í—ã–∂–∏–≤—à–∏—Ö –º—É—Ä–∞–≤—å—ë–≤: " << muravi.size() << "\n";
    for ( Ant * ant : muravi )
          {
        std::string rol = "–±–µ–∑ —Ä–æ–ª–∏";
        if ( ant->JavlyaetsyaSoldatom() )
            rol = "—Å–æ–ª–¥–∞—Ç";
        else if ( dynamic_cast< Nurse * >( ant->GetRole() ) )
            rol = "–Ω—è–Ω—å–∫–∞";
        else if ( dynamic_cast< Shepherd * >( ant->GetRole() ) )
            rol = "–ø–∞—Å—Ç—É—Ö";
        else if ( dynamic_cast< Forager * >( ant->GetRole() ) )
            rol = "—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å";
        else if ( dynamic_cast< Builder * >( ant->GetRole() ) )
            rol = "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å";
        else if ( dynamic_cast< Cleaner * >( ant->GetRole() ) )
            rol = "—É–±–æ—Ä—â–∏–∫";
        
        std::cout << rol << " #" << ant->GetId() << "\n";
          }
    
    den++;
}

void AntHill::DobavitMuravya ()
{
    if ( ( int ) muravi.size () < max_muravei )
          {
        Ant * noviy = new Ant ();
        noviy->UstanovitSvyaz ( this );
        muravi.push_back ( noviy );
          }
}

int AntHill::GetEda () const
{
    return eda;
}

int AntHill::GetVetki () const
{
    return vetki;
}

void AntHill::DobavitEdy ( int kolvo )
{
    eda += kolvo;
    std::cout << "üçé –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª " << kolvo << " –µ–¥—ã. –í—Å–µ–≥–æ: " << eda << "\n";
}

void AntHill::DobavitVetok ( int kolvo )
{
    vetki += kolvo;
    std::cout << "ü™µ –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª " << kolvo << " –≤–µ—Ç–æ–∫. –í—Å–µ–≥–æ: " << vetki << "\n";
}

void AntHill::UpdatitRazmer ()
{
    if ( vetki >= 10 )
          {
        vetki -= 10;
        razmer += 10;
        max_muravei += 1;
        std::cout << "üè† –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è! –†–∞–∑–º–µ—Ä: " << razmer << ", –ú–∞–∫—Å. –º—É—Ä–∞–≤—å—ë–≤: " << max_muravei << "\n";
          }
}

bool AntHill::VseMuraviUmerli () const
{
    return muravi.empty ();
}

std::vector< Ant * > & AntHill::GetMuravi ()
{
    return muravi;
}

void AntHill::ZabratEdyu ( int kolvo )
{
    eda -= kolvo;
    if ( eda < 0 ) eda = 0;
}

Ant * AntHill::PoyavlenieNovogoMuravya ()
{
    if ( muravi.size() >= max_muravei ) return nullptr;
    if ( eda < 5 ) return nullptr;
    
    Ant * noviy = new Ant ();
    noviy->UstanovitSvyaz ( this );
    eda -= 5;
    
    std::cout << "üê£ –ù–æ–≤—ã–π –º—É—Ä–∞–≤–µ–π –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–≤–µ—Ç!\n";
    return noviy;
}
